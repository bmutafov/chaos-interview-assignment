import Head from "next/head";
import { Session, User } from "@supabase/auth-helpers-nextjs";
import { GetServerSidePropsContext } from "next";
import { Button, Container, Flex } from "@mantine/core";
import AddDocument from "@/components/AddDocuments";
import ListDocuments from "@/components/ListDocument";
import React from "react";
import { Document } from "@/types/document";
import { REDIRECT_HOME } from "@/utils/next-serverside-utils";
import { SupabaseServerClient } from "@/utils/supabase.client";
import { useSupabaseClient, useUser } from "@supabase/auth-helpers-react";
import { Database } from "@/types/supabase";
import UserInfo from "@/components/UserInfo/UserInfo";

type Props = {
  initialSession: Session;
  user: User;
  documents: any[];
};

export default function Home({ documents: documentProps }: Props) {
  const [documents, setDocuments] = React.useState<Document[]>(documentProps);

  const handleDocumentAdded = React.useCallback((document: Document) => {
    setDocuments((prev) => [...prev, document]);
  }, []);

  return (
    <>
      <Head>
        <title>Chaos Interview</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          <UserInfo />
          <AddDocument onDocumentAdded={handleDocumentAdded} />
          <ListDocuments documents={documents} />
        </Container>
      </main>
    </>
  );
}

export const getServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const supabaseServerClient = new SupabaseServerClient(context);
  const session = await supabaseServerClient.getSession();

  if (!session?.user.id) {
    return REDIRECT_HOME;
  }

  const documents = await supabaseServerClient.getUserDocuments(
    session.user.id
  );
  const extractedDocumentData = documents?.map((document) => ({
    ...document.documentId,
  }));

  return {
    props: {
      initialSession: session,
      user: session.user,
      documents: extractedDocumentData || [],
    } as Props,
  };
};
